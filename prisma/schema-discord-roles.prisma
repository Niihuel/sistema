// This is an enhanced schema for Discord-like roles system
// To be integrated with the existing schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENHANCED DISCORD-LIKE ROLES AND PERMISSIONS SYSTEM
// ============================================================================

model DiscordRole {
  id            String   @id @default(cuid())
  name          String   @db.NVarChar(50)
  displayName   String   @db.NVarChar(100)
  description   String?  @db.NVarChar(500)
  color         String   @default("#95A5A6") @db.NVarChar(7) // Hex color for visual distinction
  icon          String?  @db.NVarChar(50) // Emoji or icon identifier
  position      Int      @default(0) // Higher position = higher in hierarchy
  isDefault     Boolean  @default(false) // Default role for new users
  isMentionable Boolean  @default(true) // Can be @mentioned
  isHoisted     Boolean  @default(false) // Displayed separately in member list
  companyId     String?  @db.NVarChar(50) // Multi-tenant support
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  // Relationships
  users           UserDiscordRole[]
  permissions     RoleDiscordPermission[]
  permissionOverrides PermissionOverride[]

  @@unique([name, companyId])
  @@index([position])
  @@index([companyId])
  @@index([isActive])
}

model UserDiscordRole {
  id         String    @id @default(cuid())
  userId     Int
  roleId     String
  assignedAt DateTime  @default(now())
  assignedBy String?   @db.NVarChar(50) // Username or ID of who assigned the role
  expiresAt  DateTime? // For temporary roles
  notes      String?   @db.NVarChar(500) // Assignment reason/notes

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role DiscordRole  @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([expiresAt])
}

model DiscordPermission {
  id                String   @id @default(cuid())
  resource          String   @db.NVarChar(50) // e.g., "equipment", "tickets", "system"
  action            String   @db.NVarChar(30) // e.g., "view", "create", "edit", "delete"
  name              String   @db.NVarChar(100) // Human-readable name
  description       String?  @db.NVarChar(500)
  category          String   @db.NVarChar(50) // Grouping: "Management", "Administration", etc.
  dangerous         Boolean  @default(false) // Critical permissions
  requiresTwoFactor Boolean  @default(false)
  metadata          String?  @db.Text // JSON for additional data

  roles     RoleDiscordPermission[]
  overrides PermissionOverride[]

  @@unique([resource, action])
  @@index([category])
  @@index([resource])
  @@index([action])
}

model RoleDiscordPermission {
  id           String    @id @default(cuid())
  roleId       String
  permissionId String
  granted      Boolean   @default(true) // true = allowed, false = explicitly denied
  conditions   String?   @db.Text // JSON for conditional permissions
  assignedAt   DateTime  @default(now())
  assignedBy   String?   @db.NVarChar(50)

  role       DiscordRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission DiscordPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model PermissionOverride {
  id           String    @id @default(cuid())
  userId       Int?
  roleId       String?
  permissionId String
  allow        Boolean   @default(true) // true = allow, false = deny
  reason       String    @db.NVarChar(500) // Required reason for override
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  createdBy    String    @db.NVarChar(50)

  user       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       DiscordRole?      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission DiscordPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roleId])
  @@index([permissionId])
  @@index([expiresAt])
}

model RoleTemplate {
  id          String   @id @default(cuid())
  name        String   @unique @db.NVarChar(100)
  description String?  @db.NVarChar(500)
  permissions String   @db.Text // JSON array of permission identifiers
  icon        String?  @db.NVarChar(50)
  color       String?  @db.NVarChar(7)
  isPublic    Boolean  @default(false)
  category    String?  @db.NVarChar(50) // "System", "Custom", "Industry"
  metadata    String?  @db.Text // JSON for additional configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isPublic])
}

model RoleHierarchy {
  id           String   @id @default(cuid())
  parentRoleId String
  childRoleId  String
  inheritPerms Boolean  @default(true) // Whether child inherits parent's permissions
  createdAt    DateTime @default(now())

  @@unique([parentRoleId, childRoleId])
  @@index([parentRoleId])
  @@index([childRoleId])
}

model PermissionGroup {
  id          String   @id @default(cuid())
  name        String   @unique @db.NVarChar(100)
  description String?  @db.NVarChar(500)
  permissions String   @db.Text // JSON array of permission IDs
  category    String   @db.NVarChar(50)
  icon        String?  @db.NVarChar(50)
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isSystem])
}

// Extend the existing User model
model User {
  id                     Int                @id @default(autoincrement())
  username               String             @unique @db.NVarChar(50)
  email                  String?            @unique @db.NVarChar(255)
  passwordHash           String             @db.NVarChar(255)
  role                   String             @default("USER") @db.NVarChar(20) // Legacy field
  firstName              String?            @db.NVarChar(100)
  lastName               String?            @db.NVarChar(100)
  isActive               Boolean            @default(true)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  // Discord-like role relationships
  discordRoles        UserDiscordRole[]
  permissionOverrides PermissionOverride[]

  // ... rest of existing fields
}